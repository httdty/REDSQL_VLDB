{
  "dog_kennels": {
    "breeds.breed_code": "The unique code identifying a specific dog breed; (Primary Key)",
    "breeds.breed_name": "The name associated with each breed code.",
    "sizes.size_code": "The unique code identifying a specific size category of dogs; (Primary Key)",
    "sizes.size_description": "The description of the size category (e.g., Large, Medium, Small);",
    "treatment_types.treatment_type_code": "The unique code identifying a specific type of treatment; (Primary Key)",
    "treatment_types.treatment_type_description": "A description of the treatment type (e.g., Physical examination, Vaccination, etc.);",
    "charges.charge_id": "The unique identifier for a specific charge; (Primary Key)",
    "charges.charge_type": "The type of charge (e.g., Daily Accommodation, Drugs, Health Check);",
    "charges.charge_amount": "The amount to be charged for this charge type;",
    "treatments.treatment_id": "The unique identifier for a specific treatment event or record; (Primary Key)",
    "treatments.dog_id": "The unique identifier of the dog being treated; (Foreign Key, link to `Dogs`.`dog_id`)",
    "treatments.professional_id": "The unique identifier of the professional performing the treatment; (Foreign Key, link to `Professionals`.`professional_id`)",
    "treatments.treatment_type_code": "The code identifying the type of treatment performed; (Foreign Key, link to `Treatment_Types`.`treatment_type_code`)",
    "treatments.date_of_treatment": "The date and time when the treatment was administered;",
    "treatments.cost_of_treatment": "The amount of money charged for the treatment.",
    "owners.owner_id": "The unique identifier for the owner of the dog; (Primary Key)",
    "owners.first_name": "The first name of the dog owner;",
    "owners.last_name": "The last name of the dog owner;",
    "owners.street": "The street address of the owner's residence;",
    "owners.city": "The city where the dog's owner resides;",
    "owners.state": "The state where the dog's owner resides;",
    "owners.zip_code": "The ZIP/postal code of the owner's address.",
    "owners.email_address": "The email address of the dog's owner;",
    "owners.home_phone": "The home phone number of the dog's owner;",
    "owners.cell_number": "The cell phone number of the dog's owner;",
    "professionals.professional_id": "The unique identifier for a professional (e.g., veterinarian, employee, etc.); (Primary Key)",
    "professionals.role_code": "The role or job title of the professional (e.g., Employee, Veterinarian, etc.);",
    "professionals.first_name": "The first name of the professional;",
    "professionals.street": "The street address of the professional's residence;",
    "professionals.city": "The city in which the professional resides.",
    "professionals.state": "The state in which the professional resides.",
    "professionals.zip_code": "The ZIP/postal code of the professional's address.",
    "professionals.last_name": "The last name of the professional;",
    "professionals.email_address": "The email address of the professional;",
    "professionals.home_phone": "The home phone number of the professional;",
    "professionals.cell_number": "The mobile phone number of the professional.",
    "dogs.dog_id": "The unique identifier for a dog, used as the primary key.",
    "dogs.owner_id": "The unique identifier for the owner of the dog; (Foreign Key, link to `Owners`.`owner_id`)",
    "dogs.abandoned_yn": "Indicates if the dog has been abandoned (0 for No, 1 for Yes);",
    "dogs.breed_code": "The breed code of the dog; (Foreign Key, link to `Breeds`.`breed_code`)",
    "dogs.size_code": "The size code of the dog; (Foreign Key, link to `Sizes`.`size_code`)",
    "dogs.name": "The name given to the dog.",
    "dogs.age": "The age of the dog in years;",
    "dogs.date_of_birth": "The date and time when the dog was born;",
    "dogs.gender": "The gender of the dog ('0' for male, '1' for female).",
    "dogs.weight": "The weight of the dog;",
    "dogs.date_arrived": "The date and time when the dog arrived at the kennel;",
    "dogs.date_adopted": "The date and time when the dog was adopted (if applicable);",
    "dogs.date_departed": "The date and time when the dog departed from the kennel;"
  },
  "flight_2": {
    "airlines.uid": "Unique identifier for each airline (Primary Key).",
    "airlines.airline": "The full name of the airline.",
    "airlines.abbreviation": "The abbreviation or short form of the airline's name;",
    "airlines.country": "The primary country where the airline is based.",
    "flights.airline": "The unique identifier of the airline operating the flight (Primary Key, linking to `airlines`.`uid`).",
    "flights.flightno": "The unique flight number assigned to a specific flight.",
    "flights.sourceairport": "The airport code for the source (departure) airport (Foreign Key, linking to `airports`.`AirportCode`).",
    "flights.destairport": "The airport code for the destination (arrival) airport (Foreign Key, linking to `airports`.`AirportCode`).",
    "airports.city": "The city where the airport is located.",
    "airports.airportcode": "The unique code assigned to the airport (Primary Key).",
    "airports.airportname": "The name of the airport.",
    "airports.country": "The country where the airport is located.",
    "airports.countryabbrev": "The abbreviation of the country where the airport is located."
  },
  "pets_1": {
    "has_pet.stuid": "The ID of the student who owns the pet (Foreign Key, linked to `Student`.`StuID`);",
    "has_pet.petid": "The ID of the pet owned by the student (Foreign Key, linked to `Pets`.`PetID`);",
    "pets.petid": "The unique identifier assigned to each pet (Primary Key).",
    "pets.pettype": "The type or species of the pet (e.g., dog, cat);",
    "pets.pet_age": "The age of the pet in years;",
    "pets.weight": "The weight of the pet in kilograms;",
    "student.stuid": "The unique identifier for each student (Primary Key);",
    "student.lname": "The last name of the student;",
    "student.fname": "The first name of the student;",
    "student.age": "The age of the student in years;",
    "student.sex": "The sex of the student (i.e., male or female);",
    "student.major": "The major of the student, represented by a numeric code;",
    "student.advisor": "The unique identifier for the student's academic advisor.",
    "student.city_code": "The code representing the city associated with the student."
  },
  "concert_singer": {
    "stadium.stadium_id": "The ID of the stadium, serves as the Primary Key.",
    "stadium.location": "The location or city where the stadium is situated.",
    "stadium.name": "The name of the stadium.",
    "stadium.capacity": "The maximum number of people the stadium can hold.",
    "stadium.highest": "The highest recorded attendance at the stadium.",
    "stadium.lowest": "The lowest attendance recorded for an event at the stadium.",
    "stadium.average": "The average attendance for events held at the stadium.",
    "singer.singer_id": "The ID of the singer, serves as the Primary Key.",
    "singer.name": "The name of the singer.",
    "singer.country": "The country of origin for the singer.",
    "singer.song_name": "The name of the song performed by the singer.",
    "singer.song_release_year": "The year the song performed by the singer was released.",
    "singer.age": "The age of the singer.",
    "singer.is_male": "Indicates whether the singer is male (T = true, F = false).",
    "concert.concert_id": "The ID of the concert, serves as the Primary Key.",
    "concert.concert_name": "The name of the concert event.",
    "concert.theme": "The thematic concept or focus of the concert.",
    "concert.stadium_id": "The unique identifier of the stadium where the concert is held (Foreign Key linked to `stadium.Stadium_ID`).",
    "concert.year": "The year in which the concert took place.",
    "singer_in_concert.concert_id": "The unique identifier for the concert (Foreign Key linked to `concert.concert_ID`).",
    "singer_in_concert.singer_id": "The unique identifier for the singer (Foreign Key linked to `singer.Singer_ID`)."
  },
  "museum_visit": {
    "visitor.id": "The unique identifier for each visitor (Primary Key).",
    "visitor.name": "The full name of the visitor;",
    "visitor.level_of_membership": "The level of membership held by the visitor.",
    "visitor.age": "The age of the visitor.",
    "museum.museum_id": "The unique identifier for each museum (Primary Key).",
    "museum.name": "The name of the museum.",
    "museum.num_of_staff": "The number of staff members employed by the museum.",
    "museum.open_year": "The year in which the museum was opened.",
    "visit.museum_id": "The unique identifier for the museum visited, linking to `museum`.`Museum_ID` (Foreign Key).",
    "visit.visitor_id": "The unique identifier for the visitor, linking to `visitor`.`ID` (Foreign Key).",
    "visit.num_of_ticket": "The number of tickets purchased during the visit.",
    "visit.total_spent": "The total amount of money the visitor spent on the visit."
  },
  "battle_death": {
    "death.caused_by_ship_id": "The ID of the ship that caused the deaths or injuries (Foreign Key, links to `ship`.`id`);",
    "death.id": "The unique identifier for each death record (Primary Key).",
    "death.note": "A note providing additional details about the death incident;",
    "death.killed": "The number of individuals killed in the incident.",
    "death.injured": "The number of individuals injured in the incident.",
    "battle.id": "Unique identifier for each battle record (Primary Key);",
    "battle.name": "The name of the battle;",
    "battle.date": "The date or time period when the battle occurred.",
    "battle.bulgarian_commander": "The name of the Bulgarian commander involved in the battle.",
    "battle.latin_commander": "The name of the Latin (opposing) commander in the battle;",
    "battle.result": "The outcome or result of the battle;",
    "ship.lost_in_battle": "The ID of the battle in which the ship was lost (Foreign Key, links to `battle`.`id`);",
    "ship.id": "Unique identifier for each ship record (Primary Key);",
    "ship.name": "The name of the ship;",
    "ship.tonnage": "The tonnage (a measure of size or cargo-carrying capacity) of the ship;",
    "ship.ship_type": "The type or classification of the ship;",
    "ship.location": "The location where the ship was found or where the incident occurred;",
    "ship.disposition_of_ship": "The final status or fate of the ship (e.g., captured, wrecked, etc.)."
  },
  "student_transcripts_tracking": {
    "transcripts.transcript_id": "The unique identifier for each transcript.",
    "transcripts.transcript_date": "The date and time when the transcript was issued.",
    "transcripts.other_details": "Additional information related to the transcript.",
    "transcript_contents.student_course_id": "The identifier linking to the `student_course_id` in the `Student_Enrolment_Courses` table.",
    "transcript_contents.transcript_id": "The identifier linking to the `transcript_id` in the `Transcripts` table.",
    "courses.course_id": "The unique identifier for each course.",
    "courses.course_name": "The name of the course.",
    "courses.course_description": "A brief description of what the course entails.",
    "courses.other_details": "Additional information or notes about the course.",
    "semesters.semester_id": "The unique identifier for each semester.",
    "semesters.semester_name": "The name of the semester (e.g., \"Fall 2018\").",
    "semesters.semester_description": "A brief description of the semester.",
    "semesters.other_details": "Additional notes or information about the semester.",
    "departments.department_id": "The unique identifier for each department.",
    "departments.department_name": "The name of the department.",
    "departments.department_description": "A brief description of the department.",
    "departments.other_details": "Additional information or notes about the department.",
    "student_enrolment_courses.student_course_id": "The unique identifier for each student's course enrollment.",
    "student_enrolment_courses.course_id": "The identifier linking to the `course_id` in the `Courses` table.",
    "student_enrolment_courses.student_enrolment_id": "The identifier linking to the `student_enrolment_id` in the `Student_Enrolment` table.",
    "sections.section_id": "The unique identifier for each section of a course.",
    "sections.course_id": "The identifier linking to the `course_id` in the `Courses` table.",
    "sections.section_name": "The name of the course section.",
    "sections.section_description": "A brief description of the course section.",
    "sections.other_details": "Additional information or notes about the section.",
    "degree_programs.degree_program_id": "The unique identifier for each degree program.",
    "degree_programs.department_id": "The identifier linking to the `department_id` in the `Departments` table.",
    "degree_programs.degree_summary_name": "The name summarizing the degree program (e.g., Bachelor's, PHD).",
    "degree_programs.degree_summary_description": "A description summarizing the degree program.",
    "degree_programs.other_details": "Additional information or notes about the degree program.",
    "student_enrolment.student_enrolment_id": "The unique identifier for each student enrollment record.",
    "student_enrolment.degree_program_id": "The identifier linking to the `degree_program_id` in the `Degree_Programs` table.",
    "student_enrolment.semester_id": "The identifier linking to the `semester_id` in the `Semesters` table.",
    "student_enrolment.student_id": "The identifier linking to the `student_id` in the `Students` table.",
    "student_enrolment.other_details": "Any other relevant details about the student\u2019s enrollment.",
    "addresses.address_id": "The unique identifier for each address.",
    "addresses.line_1": "The first line of the address.",
    "addresses.line_2": "The secondary address line (if applicable).",
    "addresses.line_3": "The third line of the address (if applicable).",
    "addresses.city": "The city where the address is located.",
    "addresses.zip_postcode": "The zip code or postal code of the address.",
    "addresses.state_province_county": "The state, province, or county of the address.",
    "addresses.country": "The country where the address is located.",
    "addresses.other_address_details": "Additional information or notes about the address.",
    "students.student_id": "The unique identifier for each student.",
    "students.current_address_id": "The identifier linking to the `address_id` in the `Addresses` table for the student's current address.",
    "students.permanent_address_id": "The identifier linking to the `address_id` in the `Addresses` table for the student's permanent address.",
    "students.first_name": "The first name of the student.",
    "students.middle_name": "The middle name of the student.",
    "students.last_name": "The last name of the student.",
    "students.cell_mobile_number": "The cell or mobile phone number of the student.",
    "students.email_address": "The email address of the student.",
    "students.ssn": "The social security number of the student, if any.",
    "students.date_first_registered": "The date and time when the student first registered.",
    "students.date_left": "The date when the student left the institution.",
    "students.other_student_details": "Additional information or notes about the student."
  },
  "singer": {
    "song.song_id": "The unique identifier of a song in the database.",
    "song.title": "The title or name of the song;",
    "song.singer_id": "The unique identifier for the singer of the song (linked to `singer`.`Singer_ID`);",
    "song.sales": "The total number of sales for the song.",
    "song.highest_position": "The highest chart position that the song has achieved.",
    "singer.singer_id": "The unique identifier of a singer in the database.",
    "singer.name": "The name of the singer;",
    "singer.birth_year": "The year of birth of the singer;",
    "singer.net_worth_millions": "The net worth of the singer, measured in millions.",
    "singer.citizenship": "The citizenship or nationality of the singer."
  },
  "cre_Doc_Template_Mgt": {
    "ref_template_types.template_type_code": "The unique code representing the type of template (Primary Key).",
    "ref_template_types.template_type_description": "A textual description of the template type.",
    "paragraphs.paragraph_id": "The unique identifier for a paragraph within the database.",
    "paragraphs.document_id": "The identifier for the document to which the paragraph belongs, linking to `Documents.Document_ID` (Foreign Key).",
    "paragraphs.paragraph_text": "The actual text content of the paragraph.",
    "paragraphs.other_details": "Any additional details or information about the paragraph.",
    "documents.document_id": "The unique identifier for a document within the database.",
    "documents.template_id": "The identifier for the template used by the document, linking to `Templates.Template_ID` (Foreign Key).",
    "documents.document_name": "The name of the document, such as 'A history of Arts'.",
    "documents.document_description": "A brief description or summary of the document.",
    "documents.other_details": "Any additional details or information about the document.",
    "templates.template_id": "The unique identifier for a template within the database.",
    "templates.version_number": "A numeric indicator of the version of the template.",
    "templates.template_type_code": "The code representing the type of template, linking to `Ref_Template_Types.Template_Type_Code` (Foreign Key).",
    "templates.date_effective_from": "The date and time from which the template is effective.",
    "templates.date_effective_to": "The date and time when the template is no longer effective.",
    "templates.template_details": "Additional details or information related to the template."
  },
  "world_1": {
    "countrylanguage.countrycode": "The code that uniquely identifies a country, linked to `country`.`Code`; it's a Foreign Key indicating the relationship to the country.",
    "countrylanguage.language": "The language spoken in the country identified by `CountryCode`.",
    "countrylanguage.isofficial": "A flag indicating whether the language is officially recognized in the country (`T` for true, `F` for false).",
    "countrylanguage.percentage": "The percentage of the population in the country that speaks the language.",
    "city.id": "A unique identifier for each city; serves as a Primary Key.",
    "city.name": "The name of the city.",
    "city.countrycode": "The code that uniquely identifies the country to which the city belongs, linked to `country`.`Code`; it's a Foreign Key indicating the relationship to the country.",
    "city.district": "The administrative district or region where the city is located.",
    "city.population": "The population of the city.",
    "country.code": "The unique code that identifies each country; it's a Primary Key.",
    "country.name": "The name of the country.",
    "country.continent": "The continent on which the country is located.",
    "country.region": "The specific region within a continent where the country is situated.",
    "country.surfacearea": "The total surface area of the country, measured in square kilometers.",
    "country.indepyear": "The year when the country became independent;",
    "country.population": "The total population of the country.",
    "country.lifeexpectancy": "The average life expectancy of the country\u2019s population.",
    "country.gnp": "The Gross National Product of the country, measured in millions of USD.",
    "country.gnpold": "The Gross National Product of the country from a previous year, measured in millions of USD.",
    "country.localname": "The local or native name of the country.",
    "country.governmentform": "The form of government or political system of the country.",
    "country.headofstate": "The name of the current head of state in the country.",
    "country.capital": "The ID of the capital city of the country, linked to `city`.`ID`.",
    "country.code2": "An alternative code for the country, often used for different international standards or systems."
  },
  "employee_hire_evaluation": {
    "evaluation.employee_id": "The ID of the employee being evaluated. (Foreign Key, links to `employee`.`Employee_ID`)",
    "evaluation.year_awarded": "The year in which the bonus was awarded to the employee.",
    "evaluation.bonus": "The bonus amount awarded to the employee in that year.",
    "employee.employee_id": "The unique identifier for each employee (Primary Key).",
    "employee.name": "The full name of the employee.",
    "employee.age": "The age of the employee.",
    "employee.city": "The city where the employee resides.",
    "hiring.shop_id": "The ID of the shop where the employee is hired. (Foreign Key, links to `shop`.`Shop_ID`)",
    "hiring.employee_id": "The ID of the hired employee. (Foreign Key, links to `employee`.`Employee_ID`)",
    "hiring.start_from": "The starting year of the employee's employment at the shop.",
    "hiring.is_full_time": "Whether the employee is hired full-time ('T' for true, 'F' for false).",
    "shop.shop_id": "The unique identifier for each shop (Primary Key).",
    "shop.name": "The name of the shop.",
    "shop.location": "The geographical location of the shop.",
    "shop.district": "The district where the shop is situated.",
    "shop.number_products": "The total number of products available in the shop.",
    "shop.manager_name": "The name of the manager responsible for the shop."
  },
  "network_1": {
    "friend.student_id": "The ID of the highschooler who has a friend (Foreign Key, links to `Highschooler`.`ID`)",
    "friend.friend_id": "The ID of the highschooler who is the friend (Foreign Key, links to `Highschooler`.`ID`)",
    "likes.student_id": "The ID of the highschooler who likes another highschooler (Foreign Key, links to `Highschooler`.`ID`)",
    "likes.liked_id": "The ID of the highschooler who is liked by another highschooler (Foreign Key, links to `Highschooler`.`ID`)",
    "highschooler.id": "The unique identifier for each highschooler (Primary Key)",
    "highschooler.name": "The full name of the highschool student.",
    "highschooler.grade": "The grade level of the highschooler in school"
  },
  "poker_player": {
    "people.people_id": "The unique identifier for each person in the database.",
    "people.nationality": "The nationality of the person, indicating their country of origin or citizenship.",
    "people.name": "The full name of the person (Unique).",
    "people.birth_date": "The birth date of the individual.",
    "people.height": "The height of the person, measured in centimeters.",
    "poker_player.poker_player_id": "The unique identifier for each poker player in the database.",
    "poker_player.people_id": "The unique identifier linking the poker player to the corresponding person in the `people` table.",
    "poker_player.final_table_made": "The number of times the poker player has made it to the final table in poker tournaments.",
    "poker_player.best_finish": "The highest position the poker player has achieved in a poker tournament.",
    "poker_player.money_rank": "The ranking of the poker player based on their total earnings from poker tournaments.",
    "poker_player.earnings": "The total earnings of the poker player from poker tournaments, in monetary terms."
  },
  "real_estate_properties": {
    "ref_feature_types.feature_type_code": "The unique code identifying the type of feature; primary key.",
    "ref_feature_types.feature_type_name": "A descriptive name for the feature type, such as 'Amenity, eg Pool.' or 'Security, eg Burglar.'",
    "ref_property_types.property_type_code": "The unique code identifying the type of property; primary key.",
    "ref_property_types.property_type_description": "A descriptive name for the property type, such as 'Apartment, Flat, Con.' or 'Field, Meadow.'",
    "other_property_features.property_id": "The unique identifier for the property; foreign key linking to `Properties`.`property_id`.",
    "other_property_features.feature_id": "The unique identifier for the available feature; foreign key linking to `Other_Available_Features`.`feature_id`.",
    "other_property_features.property_feature_description": "A detailed description of the specific feature associated with the property.",
    "other_available_features.feature_id": "The unique identifier for the feature; primary key.",
    "other_available_features.feature_type_code": "The code identifying the type of feature; foreign key linking to `Ref_Feature_Types`.`feature_type_code`.",
    "other_available_features.feature_name": "The name of the feature, such as 'AirCon' or 'BurglarAlarm.'",
    "other_available_features.feature_description": "A detailed description of the feature, such as 'Air Conditioning.' or 'Burglar Alarm.'",
    "properties.property_id": "The unique identifier for the property; primary key.",
    "properties.property_type_code": "The code identifying the type of property; foreign key linking to `Ref_Property_Types`.`property_type_code`.",
    "properties.date_on_market": "The date when the property was first listed on the market.",
    "properties.date_sold": "The date and time when the property was sold.",
    "properties.property_name": "The name of the property, such as 'avalon' or 'chelsea'.",
    "properties.property_address": "The physical address of the property.",
    "properties.room_count": "The total number of rooms in the property.",
    "properties.vendor_requested_price": "The price requested by the vendor (seller) for the property.",
    "properties.buyer_offered_price": "The price offered by the buyer for the property.",
    "properties.agreed_selling_price": "The final price agreed upon for the sale of the property.",
    "properties.apt_feature_1": "A specific feature for an apartment property (Feature 1);",
    "properties.apt_feature_2": "A specific feature for an apartment property (Feature 2);",
    "properties.apt_feature_3": "A specific feature for an apartment property (Feature 3);",
    "properties.fld_feature_1": "The first additional feature of the field-type property.",
    "properties.fld_feature_2": "The second additional feature of the field-type property.",
    "properties.fld_feature_3": "The third additional feature of the field-type property.",
    "properties.hse_feature_1": "The first additional feature of the house-type property.",
    "properties.hse_feature_2": "The second additional feature of the house-type property.",
    "properties.hse_feature_3": "The third additional feature of the house-type property.",
    "properties.oth_feature_1": "The first feature of the other property type if applicable.",
    "properties.oth_feature_2": "The second feature specific to an other type of property.",
    "properties.oth_feature_3": "The third feature of the other property type if applicable.",
    "properties.shp_feature_1": "The first additional feature of the shop-type property.",
    "properties.shp_feature_2": "The second additional feature of the shop-type property.",
    "properties.shp_feature_3": "The third additional feature of the shop-type property.",
    "properties.other_property_details": "Any other details about the property if applicable."
  },
  "course_teach": {
    "course.course_id": "The unique identifier of the course (Primary Key);",
    "course.staring_date": "The starting date of the course, represented as text;",
    "course.course": "The name of the course, represented as text;",
    "course_arrange.course_id": "The identity of the course (Foreign Key, linked to `course`.`Course_ID`).",
    "course_arrange.teacher_id": "The identity of the teacher assigned to the course (Foreign Key, linked to `teacher`.`Teacher_ID`).",
    "course_arrange.grade": "The grade level associated with the course arrangement.",
    "teacher.teacher_id": "The unique identifier of the teacher (Primary Key);",
    "teacher.name": "The name of the teacher, represented as text;",
    "teacher.age": "The age of the teacher, represented as text;",
    "teacher.hometown": "The hometown of the teacher, represented as text;"
  },
  "voter_1": {
    "area_code_state.area_code": "The unique area code associated with a specific state;",
    "area_code_state.state": "The name of the U.S. state corresponding to the area code.",
    "contestants.contestant_number": "The unique numeric identifier assigned to each contestant.",
    "contestants.contestant_name": "The name of the contestant, represented by a textual value.",
    "votes.vote_id": "The unique numeric identifier for each vote record.",
    "votes.phone_number": "A unique numeric phone number from which the vote was cast.",
    "votes.state": "The state from which the vote was cast, linked to `AREA_CODE_STATE`.`state`;",
    "votes.contestant_number": "The number of the contestant for whom the vote was cast, linked to `CONTESTANTS`.`contestant_number`;",
    "votes.created": "The timestamp indicating when the vote was cast;"
  },
  "wta_1": {
    "rankings.ranking_date": "The date on which the ranking is recorded, e.g., 20160307.",
    "rankings.ranking": "The position of the player in the ranking on the given date.",
    "rankings.player_id": "The unique identifier for the player, linked to players.player_id.",
    "rankings.ranking_points": "The total points accumulated by the player at the given ranking date.",
    "rankings.tours": "The number of tours or tournaments the player participated in up to that ranking date.",
    "players.player_id": "The unique identifier (ID) of the player (Primary Key);",
    "players.first_name": "The first name of the player, e.g., 'Anna'.",
    "players.last_name": "The last name of the player, e.g., 'Lee'.",
    "players.hand": "The playing hand of the player (e.g., right-handed or left-handed).",
    "players.birth_date": "The birth date of the player, in the format YYYYMMDD;",
    "players.country_code": "The country code representing the player's nationality;",
    "matches.best_of": "The best of the number of sets in the match (typically 3);",
    "matches.draw_size": "The number of players in the tournament draw, e.g., 128.",
    "matches.loser_age": "The age of the losing player at the time of the match;",
    "matches.loser_entry": "The entry status of the losing player (e.g., wildcard, qualifier).",
    "matches.loser_hand": "The playing hand of the loser, e.g., 'R' for right-handed.",
    "matches.loser_ht": "The height of the player who lost the match, e.g., 174 cm.",
    "matches.loser_id": "The unique identifier for the player who lost the match, linked to players.player_id.",
    "matches.loser_ioc": "The International Olympic Committee code for the country of the player who lost the match.",
    "matches.loser_name": "The name of the player who lost the match.",
    "matches.loser_rank": "The ranking of the player who lost the match at the time of the match.",
    "matches.loser_rank_points": "The ranking points of the player who lost the match at the time of the match.",
    "matches.loser_seed": "The seed position of the losing player in the tournament;",
    "matches.match_num": "The number assigned to the match within the tournament;",
    "matches.minutes": "The duration of the match in minutes, e.g., 77.",
    "matches.round": "The round of the tournament in which the match took place.",
    "matches.score": "The final score of the match, e.g., '6-4 6-4'.",
    "matches.surface": "The type of surface the match was played on, e.g., 'Hard'.",
    "matches.tourney_date": "The date of the tournament in which the match was played.",
    "matches.tourney_id": "The unique identifier (ID) of the tournament;",
    "matches.tourney_level": "The level of the tournament (e.g., Grand Slam, ATP 1000).",
    "matches.tourney_name": "The name of the tournament, e.g., 'Indian Wells'.",
    "matches.winner_age": "The age of the winning player at the time of the match;",
    "matches.winner_entry": "The entry status of the winning player (e.g., wildcard, qualifier).",
    "matches.winner_hand": "The playing hand of the winner, e.g., 'R' for right-handed.",
    "matches.winner_ht": "The height of the player who won the match, e.g., 174 cm.",
    "matches.winner_id": "The unique identifier for the player who won the match, linked to players.player_id.",
    "matches.winner_ioc": "The International Olympic Committee code for the country of the player who won the match.",
    "matches.winner_name": "The name of the player who won the match.",
    "matches.winner_rank": "The ranking of the player who won the match at the time of the match.",
    "matches.winner_rank_points": "The ranking points of the player who won the match at the time of the match.",
    "matches.winner_seed": "The seed position of the winning player in the tournament;",
    "matches.year": "The year when the match took place, e.g., 2016."
  },
  "orchestra": {
    "conductor.conductor_id": "The unique identifier for each conductor.",
    "conductor.name": "The full name of the conductor.",
    "conductor.age": "The age of the conductor.",
    "conductor.nationality": "The country of origin of the conductor.",
    "conductor.year_of_work": "The number of years the conductor has been working.",
    "show.show_id": "The unique identifier for each show.",
    "show.performance_id": "(Foreign Key, links to `performance`.`Performance_ID`) The identifier of the performance that this show belongs to.",
    "show.if_first_show": "Indicates if this is the first show at the specified venue.",
    "show.result": "The result of the show, commonly indicated by letters.",
    "show.attendance": "The number of people who attended the show.",
    "orchestra.orchestra_id": "The unique identifier for each orchestra.",
    "orchestra.orchestra": "The name of the orchestra.",
    "orchestra.conductor_id": "(Foreign Key, links to `conductor`.`Conductor_ID`) The identifier of the conductor who leads this orchestra.",
    "orchestra.record_company": "The record company associated with the orchestra.",
    "orchestra.year_of_founded": "The year in which the orchestra was founded.",
    "orchestra.major_record_format": "The major format of records produced by the orchestra.",
    "performance.performance_id": "The unique identifier for each performance.",
    "performance.orchestra_id": "(Foreign Key, links to `orchestra`.`Orchestra_ID`) The identifier of the orchestra that performed.",
    "performance.type": "The type or category of the performance.",
    "performance.date": "The date on which the performance took place.",
    "performance.official_ratings_(millions)": "The official ratings for the performance in millions.",
    "performance.weekly_rank": "The rank of the performance within a weekly period.",
    "performance.share": "The share percentage of the audience for the performance."
  },
  "car_1": {
    "continents.contid": "The unique identifier for each continent.",
    "continents.continent": "The name of the continent.",
    "model_list.modelid": "The unique identifier for the model of a car;",
    "model_list.maker": "The unique identifier for the car maker (foreign key referring to `car_makers.Id`).",
    "model_list.model": "The name of the car model.",
    "countries.countryid": "The unique identifier for each country.",
    "countries.countryname": "The name of the country.",
    "countries.continent": "The unique identifier for the continent the country is in (foreign key referring to `continents.ContId`).",
    "car_names.makeid": "The unique identifier for a specific car make;",
    "car_names.model": "The name of the car model (foreign key referring to `model_list.Model`).",
    "car_names.make": "The specific name or variant of the car make;",
    "car_makers.id": "The unique identifier for each car manufacturer;",
    "car_makers.maker": "The shortened or abbreviated name of the car maker.",
    "car_makers.fullname": "The full name of the car manufacturing company;",
    "car_makers.country": "The unique identifier for the country the car maker is based in (foreign key referring to `countries.CountryId`).",
    "cars_data.id": "The unique identifier for each car record (foreign key referring to `car_names.MakeId`).",
    "cars_data.mpg": "The miles per gallon (fuel efficiency) of the car.",
    "cars_data.cylinders": "The number of cylinders in the car's engine.",
    "cars_data.edispl": "The engine displacement in cubic inches or liters;",
    "cars_data.horsepower": "The horsepower generated by the car's engine;",
    "cars_data.weight": "The weight of the car, usually measured in pounds (lbs);",
    "cars_data.accelerate": "The time it takes for the car to accelerate, typically from 0 to 60 mph, in seconds.",
    "cars_data.year": "The year the car model was released or manufactured."
  },
  "tvshow": {
    "cartoon.id": "The unique identifier for each cartoon in the `Cartoon` table.",
    "cartoon.title": "The title or name of the cartoon episode.",
    "cartoon.directed_by": "The director responsible for creating the cartoon episode.",
    "cartoon.written_by": "The writer who wrote the script for the cartoon episode.",
    "cartoon.original_air_date": "The date on which the cartoon episode was originally aired.",
    "cartoon.production_code": "A unique production code assigned to each cartoon episode.",
    "tv_channel.id": "The unique identifier for each TV channel in the database.",
    "tv_channel.series_name": "The name of the TV series broadcasted by the channel.",
    "tv_channel.country": "The country where the TV channel is based or primarily operates.",
    "tv_channel.language": "The language in which the TV channel primarily broadcasts;",
    "tv_channel.content": "The type of content primarily broadcasted by the TV channel (e.g., music, news).",
    "tv_channel.pixel_aspect_ratio_par": "The pixel aspect ratio used in the broadcasts of the TV channel.",
    "tv_channel.hight_definition_tv": "Indicates whether the TV channel broadcasts in high definition (yes or no).",
    "tv_channel.pay_per_view_ppv": "Indicates whether the TV channel offers pay-per-view services (yes or no).",
    "tv_channel.package_option": "The package option or pricing model available for subscribing to the TV channel.",
    "tv_series.id": "A unique identifier for each TV series entry (Primary Key).",
    "tv_series.episode": "The title or name of the episode in the TV series.",
    "tv_series.air_date": "The date when the TV series episode was originally aired.",
    "tv_series.rating": "The rating assigned to the TV series episode.",
    "tv_series.share": "The percentage share of viewers for the TV series episode.",
    "tv_series.18_49_rating_share": "The rating and share of viewers in the 18-49 age demographic for the TV series episode.",
    "tv_series.viewers_m": "The number of viewers (in millions) for the TV series episode.",
    "tv_series.weekly_rank": "The rank of the TV series episode for that particular week.",
    "cartoon.channel": "The channel on which the cartoon was broadcast, linking to `TV_Channel.id`.",
    "tv_series.channel": "The channel on which the TV series was broadcast, linking to `TV_Channel.id`."
  }
}
{
  "debit_card_specializing": {
    "products.productid": "The unique identifier for each product.",
    "products.description": "A textual description of the product.",
    "customers.customerid": "The unique identifier for each customer.",
    "customers.segment": "The customer segment or classification (e.g., SME, KAM).",
    "customers.currency": "The currency used by the customer, e.g., 'CZK' or 'EUR'.",
    "yearmonth.customerid": "The unique identifier for each customer, linked to `customers`.`CustomerID` (Foreign Key).",
    "yearmonth.date": "The year and month associated with the consumption data.",
    "yearmonth.consumption": "The total amount of consumption by the customer for the specified year and month.",
    "gasstations.gasstationid": "The unique identifier for each gas station.",
    "gasstations.chainid": "The chain identifier to which the gas station belongs.",
    "gasstations.country": "The country in which the gas station is located.",
    "gasstations.segment": "The market segment classification of the gas station chain.",
    "transactions_1k.transactionid": "The unique identifier for each transaction.",
    "transactions_1k.date": "The date of the transaction in 'YYYY-MM-DD' format.",
    "transactions_1k.time": "The time of the transaction in 'HH:MM:SS' format.",
    "transactions_1k.customerid": "The unique identifier for each customer, linked to `customers`.`CustomerID`.",
    "transactions_1k.cardid": "The unique identifier of the debit card used in the transaction.",
    "transactions_1k.gasstationid": "The unique identifier for the gas station where the transaction occurred, linked to `gasstations`.`GasStationID`.",
    "transactions_1k.productid": "The unique identifier for the product involved in the transaction.",
    "transactions_1k.amount": "The quantity of the product purchased in the transaction.",
    "transactions_1k.price": "The price of the product at the time of the transaction."
  },
  "financial": {
    "client.client_id": "Unique identifier for each client (Primary Key);",
    "client.gender": "Gender of the client ('M' for male and 'F' for female);",
    "client.birth_date": "Birth date of the client in the format YYYY-MM-DD;",
    "client.district_id": "The district identifier where the client's branch is located (Foreign Key that links to `district`.`district_id`).",
    "card.card_id": "Unique identifier for each credit card (Primary Key);",
    "card.disp_id": "The disposition identifier associated with the credit card (Foreign Key that links to `disp`.`disp_id`).",
    "card.type": "The type of the credit card, such as 'classic' or 'junior';",
    "card.issued": "Issue date of the credit card in the format YYYY-MM-DD;",
    "disp.disp_id": "Unique identifier for each disposition (Primary Key);",
    "disp.client_id": "The client identifier associated with the disposition (Foreign Key that links to `client`.`client_id`).",
    "disp.account_id": "The account identifier associated with the disposition (Foreign Key that links to `account`.`account_id`).",
    "disp.type": "The type of disposition, such as 'OWNER' or 'DISPONENT';",
    "account.account_id": "Unique identifier for each account (Primary Key);",
    "account.district_id": "The district identifier where the account's branch is located (Foreign Key that links to `district`.`district_id`).",
    "account.frequency": "The frequency of account transactions.",
    "account.date": "Date when the account was created in the format YYYY-MM-DD;",
    "order.order_id": "Unique identifier for each payment order (Primary Key);",
    "order.account_id": "The account identifier from which the order is made (Foreign Key that links to `account`.`account_id`).",
    "order.bank_to": "Bank identifier of the recipient of the payment;",
    "order.account_to": "The account of the recipient for the order.",
    "order.amount": "Amount debited from the account for the payment order;",
    "order.k_symbol": "The characterization of the payment (e.g., 'SIPO', 'UVER').",
    "loan.loan_id": "Unique identifier for each loan (Primary Key);",
    "loan.account_id": "The account identifier associated with the loan (Foreign Key that links to `account`.`account_id`).",
    "loan.date": "Date when the loan was issued in the format YYYY-MM-DD;",
    "loan.amount": "The total amount of the loan;",
    "loan.duration": "The duration of the loan (in months).",
    "loan.payments": "The amount of monthly payments for the loan.",
    "loan.status": "The status of the loan (e.g., A - active, D - defaulted).",
    "trans.trans_id": "Unique identifier for each transaction (Primary Key);",
    "trans.account_id": "The account identifier associated with the transaction (Foreign Key that links to `account`.`account_id`).",
    "trans.date": "Date of the transaction in the format YYYY-MM-DD;",
    "trans.type": "The type of transaction, such as 'VYDAJ' (expense);",
    "trans.operation": "The mode of transaction (e.g., VYBER, PREVOD NA UCET).",
    "trans.amount": "The amount of money involved in the transaction.",
    "trans.balance": "The balance of the account after the transaction.",
    "trans.k_symbol": "Characterization of the transaction (e.g., UROK, UVER);",
    "trans.bank": "The bank of the partner involved in the transaction.",
    "trans.account": "The account number of the partner involved in the transaction.",
    "district.district_id": "The unique identifier for each district (Primary Key).",
    "district.a2": "The name of the district.",
    "district.a3": "The region in which the district is located.",
    "district.a4": "The number of inhabitants residing in the district.",
    "district.a5": "The number of municipalities with inhabitants less than 499.",
    "district.a6": "The number of municipalities with inhabitants between 500 and 1999.",
    "district.a7": "The number of municipalities with inhabitants between 2000 and 9999.",
    "district.a8": "The number of municipalities with inhabitants greater than 10000.",
    "district.a9": "Some statistical data related to the district (e.g., number of specific facilities or resources).",
    "district.a10": "The ratio of urban inhabitants in the district.",
    "district.a11": "The average salary in the district.",
    "district.a12": "The unemployment rate in the district for the year 1995.",
    "district.a13": "The unemployment rate in the district for the year 1996.",
    "district.a14": "The number of entrepreneurs per 1000 inhabitants.",
    "district.a15": "The number of committed crimes in the district for the year 1995.",
    "district.a16": "The number of committed crimes in the district for the year 1996."
  },
  "formula_1": {
    "status.statusid": "The unique identifier for the status of a race result.",
    "status.status": "Description of the race result status.",
    "seasons.year": "The year of the Formula 1 season, used as the primary key.",
    "seasons.url": "The URL providing additional information about the season.",
    "constructors.constructorid": "The unique identifier for a constructor (Primary Key).",
    "constructors.constructorref": "A reference name used internally for the constructor.",
    "constructors.name": "The full name of the constructor (team).",
    "constructors.nationality": "The nationality of the constructor.",
    "constructors.url": "URL linking to detailed information about the constructor.",
    "constructorresults.constructorresultsid": "The unique identifier for constructor results (Primary Key).",
    "constructorresults.raceid": "The unique identifier for a race (Foreign Key, links to `races`.`raceId`).",
    "constructorresults.constructorid": "The unique identifier for a constructor (Foreign Key, links to `constructors`.`constructorId`).",
    "constructorresults.points": "The number of points the constructor earned in this race.",
    "constructorresults.status": "The status of the constructor's result in this race.",
    "laptimes.raceid": "The unique identifier for a race (Foreign Key, links to `races`.`raceId`).",
    "laptimes.driverid": "The unique identifier for a driver (Foreign Key, links to `drivers`.`driverId`).",
    "laptimes.lap": "The lap number (Primary Key when combined with `raceId` and `driverId`).",
    "laptimes.position": "The position of the driver at the end of the lap.",
    "laptimes.time": "The time taken to complete the lap, formatted as text.",
    "laptimes.milliseconds": "The time in milliseconds it took to complete the lap.",
    "pitstops.raceid": "The unique identifier for a race (Foreign Key, links to `races`.`raceId`).",
    "pitstops.driverid": "The unique identifier for a driver (Foreign Key, links to `drivers`.`driverId`).",
    "pitstops.stop": "The stop number during the race (Primary Key when combined with `raceId` and `driverId`).",
    "pitstops.lap": "The lap number during which the pit stop occurred.",
    "pitstops.time": "The time at which the pit stop was made, formatted as text.",
    "pitstops.duration": "The duration of the pit stop, formatted as text.",
    "pitstops.milliseconds": "The duration of the pit stop, in milliseconds.",
    "driverstandings.driverstandingsid": "The unique identifier for the driver standings entry (Primary Key).",
    "driverstandings.raceid": "The unique identifier for a race (Foreign Key, links to `races`.`raceId`).",
    "driverstandings.driverid": "The unique identifier for a driver (Foreign Key, links to `drivers`.`driverId`).",
    "driverstandings.points": "The total points accumulated by the driver up to this race.",
    "driverstandings.position": "The position of the driver in the standings after the race.",
    "driverstandings.positiontext": "The textual representation of the driver's position.",
    "driverstandings.wins": "The number of wins the driver has in the current standing.",
    "constructorstandings.constructorstandingsid": "The unique identifier for the constructor standings entry (Primary Key).",
    "constructorstandings.raceid": "The unique identifier for a race (Foreign Key, links to `races`.`raceId`).",
    "constructorstandings.constructorid": "The unique identifier for a constructor (Foreign Key, links to `constructors`.`constructorId`).",
    "constructorstandings.points": "The points accumulated by the constructor up to that race.",
    "constructorstandings.position": "The position of the constructor in the standings.",
    "constructorstandings.positiontext": "The textual representation of the constructor's position.",
    "constructorstandings.wins": "The number of wins by the constructor in this race.",
    "circuits.circuitid": "The unique identifier for a circuit (Primary Key).",
    "circuits.circuitref": "A reference name used internally for the circuit.",
    "circuits.name": "The official name of the circuit.",
    "circuits.location": "The location where the circuit is situated.",
    "circuits.country": "The country where the circuit is situated.",
    "circuits.lat": "The latitude coordinate of the circuit.",
    "circuits.lng": "The longitude coordinate of the circuit.",
    "circuits.alt": "The altitude of the circuit.",
    "circuits.url": "The URL providing additional information about the circuit.",
    "drivers.driverid": "The unique identifier for a driver (Primary Key).",
    "drivers.driverref": "A reference name used internally for the driver.",
    "drivers.number": "The racing number of the driver, if available.",
    "drivers.code": "The code for the driver (often used in timing screens).",
    "drivers.forename": "The forename (first name) of the driver.",
    "drivers.surname": "The surname (last name) of the driver.",
    "drivers.dob": "The date of birth of the driver.",
    "drivers.nationality": "The nationality of the driver.",
    "drivers.url": "The URL providing additional information about the driver.",
    "races.raceid": "A unique identifier for each race, used as the primary key.",
    "races.year": "The year when the race took place (Foreign Key, links to `seasons`.`year`).",
    "races.round": "The round number of the race in the racing season.",
    "races.circuitid": "The unique identifier for a circuit where the race took place (Foreign Key, links to `circuits`.`circuitId`).",
    "races.name": "The official name of the race.",
    "races.date": "The date on which the race takes place.",
    "races.time": "The time at which the race started.",
    "races.url": "The URL providing additional information about the race.",
    "qualifying.qualifyid": "The unique identifier for the qualifying session (Primary Key).",
    "qualifying.raceid": "The unique identifier for a race (Foreign Key, links to `races`.`raceId`).",
    "qualifying.driverid": "The unique identifier for a driver (Foreign Key, links to `drivers`.`driverId`).",
    "qualifying.constructorid": "The unique identifier for a constructor (Foreign Key, links to `constructors`.`constructorId`).",
    "qualifying.number": "The number associated with the driver during the qualifying session.",
    "qualifying.position": "The driver's starting position in the race, as determined by the qualifying session.",
    "qualifying.q1": "The time recorded by the driver in the first qualifying session.",
    "qualifying.q2": "The time recorded by the driver in the second qualifying session.",
    "qualifying.q3": "The time recorded by the driver in the third qualifying session.",
    "results.resultid": "The unique identifier for the race result (Primary Key).",
    "results.raceid": "The unique identifier for a race (Foreign Key, links to `races`.`raceId`).",
    "results.driverid": "The unique identifier for a driver (Foreign Key, links to `drivers`.`driverId`).",
    "results.constructorid": "The unique identifier for a constructor (Foreign Key, links to `constructors`.`constructorId`).",
    "results.number": "The racing number of the driver during this race.",
    "results.grid": "The grid position from which the driver started the race.",
    "results.position": "The final position of the driver at the end of the race.",
    "results.positiontext": "The textual representation of the driver's finishing position.",
    "results.positionorder": "The order in which the driver finished, numerically.",
    "results.points": "The number of points awarded based on the classification.",
    "results.laps": "The number of laps the driver completed in this race.",
    "results.time": "The time difference to the winner or next classified car.",
    "results.milliseconds": "The total time taken to complete the race in milliseconds.",
    "results.fastestlap": "The lap number where the driver recorded their fastest lap.",
    "results.rank": "The rank of the fastest lap time recorded by the driver.",
    "results.fastestlaptime": "The time of the fastest lap recorded by the driver.",
    "results.fastestlapspeed": "The speed of the fastest lap recorded by the driver.",
    "results.statusid": "The status of the driver's race result (Foreign Key, links to `status`.`statusId`)."
  },
  "california_schools": {
    "satscores.cds": "Foreign Key, links to `schools`.`CDSCode`. It uniquely identifies each school within the `satscores` table.",
    "satscores.rtype": "The type of reporting entity, such as 'S' for school or 'D' for district.",
    "satscores.sname": "The name of the school.",
    "satscores.dname": "The name of the district that oversees the school.",
    "satscores.cname": "The name of the county where the school is located.",
    "satscores.enroll12": "The number of students enrolled in 1st through 12th grades.",
    "satscores.numtsttakr": "The number of students who took the SAT test.",
    "satscores.avgscrread": "Average SAT reading score for students who took the test;",
    "satscores.avgscrmath": "Average SAT math score for students who took the test;",
    "satscores.avgscrwrite": "Average SAT writing score for students who took the test;",
    "satscores.numge1500": "The number of SAT test takers whose total SAT scores are greater than or equal to 1500.",
    "frpm.cdscode": "Foreign Key, links to `schools`.`CDSCode`. It uniquely identifies each school within the `frpm` table.",
    "frpm.academic year": "The academic year for the data entries (e.g., '2014-2015');",
    "frpm.county code": "The code representing the county where the school is located.",
    "frpm.district code": "The code for the district where the school is located.",
    "frpm.school code": "The code representing the specific school.",
    "frpm.county name": "The name of the county where the school is situated.",
    "frpm.district name": "The name of the district where the school is located.",
    "frpm.school name": "The name of the school.",
    "frpm.district type": "The type of the school district, such as Unified, Elementary, etc.",
    "frpm.school type": "The type of the school, such as elementary, middle, or high school.",
    "frpm.educational option type": "The type of educational option, such as Traditional, Alternative, etc.",
    "frpm.nslp provision status": "The status of the National School Lunch Program provision.",
    "frpm.charter school (y/n)": "Indicates whether the school is a charter school (1 for yes, 0 for no).",
    "frpm.charter school number": "The identification number for the charter school",
    "frpm.charter funding type": "The type of funding for the charter school (e.g., Directly funded, Locally funded).",
    "frpm.irc": "Indicator for the IRC (Independent Reporting Code) status.",
    "frpm.low grade": "The lowest grade level offered by the school (e.g., 'K');",
    "frpm.high grade": "The highest grade level offered by the school (e.g., '12');",
    "frpm.enrollment (k-12)": "The total enrollment of students from kindergarten to 12th grade.",
    "frpm.free meal count (k-12)": "The number of students eligible for free meals, kindergarten to 12th grade.",
    "frpm.percent (%) eligible free (k-12)": "The percentage of students eligible for free meals, kindergarten to 12th grade.",
    "frpm.frpm count (k-12)": "The number of students eligible for free/reduced-price meals, kindergarten to 12th grade.",
    "frpm.percent (%) eligible frpm (k-12)": "The percentage of students eligible for free/reduced-price meals, kindergarten to 12th grade.",
    "frpm.enrollment (ages 5-17)": "Number of students enrolled from ages 5 through 17",
    "frpm.free meal count (ages 5-17)": "The number of students aged 5-17 eligible for free meals.",
    "frpm.percent (%) eligible free (ages 5-17)": "The percentage of students aged 5-17 eligible for free meals.",
    "frpm.frpm count (ages 5-17)": "The number of students aged 5-17 eligible for free/reduced-price meals.",
    "frpm.percent (%) eligible frpm (ages 5-17)": "The percentage of students aged 5-17 eligible for free/reduced-price meals.",
    "frpm.2013-14 calpads fall 1 certification status": "The certification status for the 2013-2014 CALPADS Fall 1 data.",
    "schools.cdscode": "Primary Key. It uniquely identifies each school across different tables.",
    "schools.ncesdist": "National Center for Educational Statistics school district identification number.",
    "schools.ncesschool": "National Center for Educational Statistics school identification number.",
    "schools.statustype": "The status type of the school (e.g., Active, Pending).",
    "schools.county": "The name of the county where the school is located.",
    "schools.district": "The district name within which the school is located.",
    "schools.school": "The name of the school.",
    "schools.street": "The street address where the school is located.",
    "schools.streetabr": "The abbreviated street address where the school is located.",
    "schools.city": "The city in which the school is located.",
    "schools.zip": "The ZIP code for the school\u2019s physical address.",
    "schools.state": "The state where the school is located.",
    "schools.mailstreet": "The mailing street address for the school.",
    "schools.mailstrabr": "The abbreviated mailing street address for the school.",
    "schools.mailcity": "The city of the school\u2019s mailing address.",
    "schools.mailzip": "The ZIP code for the school\u2019s mailing address.",
    "schools.mailstate": "The mailing state abbreviation (always 'CA').",
    "schools.phone": "The contact phone number for the school.",
    "schools.ext": "Extension number for the phone contact at the school;",
    "schools.website": "The website address for the school.",
    "schools.opendate": "The date when the school was opened.",
    "schools.closeddate": "The date when the school was closed (if applicable).",
    "schools.charter": "Indicates if the school is a charter school (1 for yes, 0 for no).",
    "schools.charternum": "The charter number for the school (if applicable).",
    "schools.fundingtype": "The type of funding for the school, such as directly funded or locally funded.",
    "schools.doc": "The district ownership code.",
    "schools.doctype": "The type associated with the district ownership code.",
    "schools.soc": "The school ownership code.",
    "schools.soctype": "The type of school ownership (e.g., Elementary Schools).",
    "schools.edopscode": "The code for the type of educational options offered.",
    "schools.edopsname": "The name of the type of educational options offered.",
    "schools.eilcode": "The educational instruction level code.",
    "schools.eilname": "The name of the educational instruction level.",
    "schools.gsoffered": "Grade span offered by the school (e.g., K-5);",
    "schools.gsserved": "The grade spans actually served by the school.",
    "schools.virtual": "Indicates if the school is virtual (N for no, Y for yes).",
    "schools.magnet": "Indicates if the school is a magnet school (1 for yes, 0 for no).",
    "schools.latitude": "Latitude coordinate of the school's physical location;",
    "schools.longitude": "Longitude coordinate of the school's physical location;",
    "schools.admfname1": "The first name of the primary school administrator.",
    "schools.admlname1": "The last name of the primary school administrator.",
    "schools.admemail1": "The email address of the primary school administrator.",
    "schools.admfname2": "The first name of the second administrator (if applicable).",
    "schools.admlname2": "The last name of the second administrator (if applicable).",
    "schools.admemail2": "The email address of the secondary school administrator.",
    "schools.admfname3": "The first name of the third administrator (if applicable).",
    "schools.admlname3": "The last name of the third administrator (if applicable).",
    "schools.admemail3": "The email address of a third school administrator.",
    "schools.lastupdate": "The date when the school's information was last updated."
  },
  "card_games": {
    "set_translations.id": "The primary key, unique identifier for the set translation.",
    "set_translations.language": "The language into which the set name has been translated.",
    "set_translations.setcode": "Foreign Key linking to `sets`.`code`, representing the set.",
    "set_translations.translation": "The translated name of the set in the specified language.",
    "legalities.id": "The primary key, unique identifier for the legality entry.",
    "legalities.format": "The format (type of card game or ruleset) to which this legality applies.",
    "legalities.status": "The legal status of the card in the specified format (e.g., Legal, Banned, Restricted).",
    "legalities.uuid": "Foreign Key linking to `cards`.`uuid`, representing the card's unique identifier.",
    "rulings.id": "The primary key, unique identifier for the ruling.",
    "rulings.date": "The date when the ruling was issued or became effective.",
    "rulings.text": "The text of the ruling or official explanation.",
    "rulings.uuid": "Foreign Key linking to `cards`.`uuid`, representing the card's unique identifier.",
    "foreign_data.id": "A unique identifier for each foreign data record.",
    "foreign_data.flavortext": "The flavor text of the card, providing lore or background information.",
    "foreign_data.language": "The language in which the foreign data is provided.",
    "foreign_data.multiverseid": "An identifier used in the Magic: The Gathering Multiverse Database.",
    "foreign_data.name": "The name of the card in the specified foreign language.",
    "foreign_data.text": "The gameplay text of the card in the specified language.",
    "foreign_data.type": "The type of card (e.g., Creature, Instant) in the specified language.",
    "foreign_data.uuid": "Foreign Key linking to `cards`.`uuid`, representing the card's unique identifier.",
    "sets.id": "The primary key, unique identifier for the set.",
    "sets.basesetsize": "The base size of the set, indicating the number of standard cards.",
    "sets.block": "The block to which the set belongs, grouping related sets.",
    "sets.booster": "Information about the types of boosters available in the set.",
    "sets.code": "A unique code representing the card set.",
    "sets.isfoilonly": "Indicator if the set contains only foil cards (0 or 1).",
    "sets.isforeignonly": "Indicator if the set contains only foreign language cards (0 or 1).",
    "sets.isnonfoilonly": "Indicator if the set contains only non-foil cards (0 or 1).",
    "sets.isonlineonly": "Indicator if the set is available only online (0 or 1).",
    "sets.ispartialpreview": "Indicator if the set is a partial preview (0 or 1).",
    "sets.keyrunecode": "The keyrune code for the set, representing the set symbol.",
    "sets.mcmid": "The unique identifier for the set in the Magic Card Market.",
    "sets.mcmidextras": "Additional identifier for the set in the Magic Card Market.",
    "sets.mcmname": "The name of the set as listed on Magic Card Market.",
    "sets.mtgocode": "The code used by Magic: The Gathering Online for the set.",
    "sets.name": "The name of the card set.",
    "sets.parentcode": "The parent code for sets that are subsets or related to other sets.",
    "sets.releasedate": "The release date of the card set.",
    "sets.tcgplayergroupid": "The identifier used by TCGPlayer for this group of cards.",
    "sets.totalsetsize": "The total size of the set, including all variants and special cards.",
    "sets.type": "The type of card set (e.g., Core, Expansion, Promo).",
    "cards.id": "The primary key, unique identifier for the card.",
    "cards.artist": "The name of the artist who created the card's artwork.",
    "cards.asciiname": "The ASCII representation of the card's name.",
    "cards.availability": "The platforms where the card is available (e.g., mtgo, paper).",
    "cards.bordercolor": "The color of the card's border.",
    "cards.cardkingdomfoilid": "The ID used by Card Kingdom for the foil version of the card.",
    "cards.cardkingdomid": "The identifier for the card in Card Kingdom;",
    "cards.coloridentity": "The color identity of the card, used in deck-building rules.",
    "cards.colorindicator": "Explicit color indicator for colorless or hybrid cards.",
    "cards.colors": "The colors of the card, if applicable.",
    "cards.convertedmanacost": "The converted mana cost of the card.",
    "cards.dueldeck": "Indicates which duel deck the card is part of if any;",
    "cards.edhrecrank": "The card's popularity rank on EDHREC for EDH/Commander format.",
    "cards.faceconvertedmanacost": "The converted mana cost of one face of a double-sided card.",
    "cards.facename": "The name of a single face of a double-faced card.",
    "cards.flavorname": "The flavor name of the card, if different from its main name.",
    "cards.flavortext": "The flavor text of the card, providing lore or background information.",
    "cards.frameeffects": "The special effects applied to the card's frame;",
    "cards.frameversion": "The version of the card frame used.",
    "cards.hand": "The hand modifier for the card, specific to Vanguard cards.",
    "cards.hasalternativedecklimit": "Flag indicating if the card has an alternative deck limit.",
    "cards.hascontentwarning": "Indicates if the card has a content warning (0 or 1).",
    "cards.hasfoil": "Flag indicating if the card is available in foil version.",
    "cards.hasnonfoil": "Indicates if the card has a non-foil version (0 or 1).",
    "cards.isalternative": "Indicates if the card is an alternative version (0 or 1).",
    "cards.isfullart": "Indicates if the card is full art (1 for yes, 0 for no).",
    "cards.isonlineonly": "Indicates if the card is only available online (0 or 1).",
    "cards.isoversized": "Indicates if the card is oversized (1 for yes, 0 for no).",
    "cards.ispromo": "Flag indicating if the card is a promotional card.",
    "cards.isreprint": "Indicates if the card is a reprint (1 for yes, 0 for no).",
    "cards.isreserved": "Indicates whether the card is on the reserved list.",
    "cards.isstarter": "Flag indicating if the card is part of a starter set.",
    "cards.isstoryspotlight": "Indicates if the card is a story spotlight card (0 or 1).",
    "cards.istextless": "Indicates if the card is textless (1 for yes, 0 for no).",
    "cards.istimeshifted": "Indicates if the card is timeshifted (1 for yes, 0 for no).",
    "cards.keywords": "Keywords associated with the card's abilities or effects.",
    "cards.layout": "The layout of the card (e.g., normal, split, double-faced).",
    "cards.leadershipskills": "The leadership skills relevant to formats like Commander.",
    "cards.life": "The life modifier for the card, specific to Vanguard cards.",
    "cards.loyalty": "The loyalty of the card (if applicable, for planeswalkers).",
    "cards.manacost": "The mana cost required to cast the card.",
    "cards.mcmid": "The identifier for the card on the Magic Card Market.",
    "cards.mcmmetaid": "The Magic Card Market metadata identifier for this card.",
    "cards.mtgarenaid": "The identifier for the card in Magic: The Gathering Arena;",
    "cards.mtgjsonv4id": "A unique identifier for the card in the MTGJSON V4 dataset.",
    "cards.mtgofoilid": "The ID used by Magic: The Gathering Online for the foil version of the card.",
    "cards.mtgoid": "The identifier for the card in Magic: The Gathering Online;",
    "cards.multiverseid": "The ID used in the Magic: The Gathering Multiverse Database for the card.",
    "cards.name": "The name of the card.",
    "cards.number": "The collector number of the card in the set.",
    "cards.originalreleasedate": "The original release date of the card.",
    "cards.originaltext": "The original text appearing on the card;",
    "cards.originaltype": "The original type printed on the card.",
    "cards.otherfaceids": "The identifiers for the other faces of a multi-faced card.",
    "cards.power": "The power of the card (if applicable, for creatures).",
    "cards.printings": "List of sets in which this card has been printed.",
    "cards.promotypes": "The types of promotions the card has been part of.",
    "cards.purchaseurls": "The URLs for purchasing the card from various vendors.",
    "cards.rarity": "The rarity of the card (e.g., common, uncommon, rare).",
    "cards.scryfallid": "The identifier for the card in the Scryfall database.",
    "cards.scryfallillustrationid": "Unique identifier for the card's illustration on Scryfall.",
    "cards.scryfalloracleid": "Unique identifier for the card's oracle text on Scryfall.",
    "cards.setcode": "The code of the set in which the card was printed.",
    "cards.side": "The side of the card (e.g., a or b for double-sided cards).",
    "cards.subtypes": "The subtypes of the card (e.g., Human, Wizard);",
    "cards.supertypes": "The supertypes of the card (e.g., Legendary, Basic).",
    "cards.tcgplayerproductid": "The identifier for the card in the TCGPlayer database.",
    "cards.text": "The text of the card's abilities or rules.",
    "cards.toughness": "The toughness of the card (if applicable, for creatures).",
    "cards.type": "The type of the card (e.g., Creature, Instant).",
    "cards.types": "The general types of the card (Artifact, Creature, etc.).",
    "cards.uuid": "Universally unique identifier for the card.",
    "cards.variations": "The identifiers for other variations of the card.",
    "cards.watermark": "The watermark present on the card, if any."
  },
  "european_football_2": {
    "country.id": "A unique identifier for each country record (Primary Key);",
    "country.name": "The name of the country;",
    "league.id": "A unique identifier for each league record (Primary Key);",
    "league.country_id": "The identifier linking to the country in which the league is based (Foreign Key linked to `Country`.`id`);",
    "league.name": "The name of the league;",
    "team.id": "A unique identifier for each team record (Primary Key);",
    "team.team_api_id": "The unique identifier for each team provided by the API.",
    "team.team_fifa_api_id": "The unique identifier for the team in the FIFA context;",
    "team.team_long_name": "The full/official name of the team;",
    "team.team_short_name": "The abbreviation or short name of a team;",
    "player.id": "A unique identifier for each player record (Primary Key);",
    "player.player_api_id": "The unique identifier for each player provided by the API.",
    "player.player_name": "The full name of the player;",
    "player.player_fifa_api_id": "The unique identifier for the player in the FIFA context;",
    "player.birthday": "The date of birth of the player;",
    "player.height": "The height of the player in centimeters (cm).",
    "player.weight": "The weight of the player in kilograms (kg).",
    "team_attributes.id": "The unique identifier for each entry of team attributes;",
    "team_attributes.team_api_id": "The unique API identifier for the team (Foreign Key linked to `Team`.`team_api_id`);",
    "team_attributes.team_fifa_api_id": "The unique FIFA API identifier for the team (Foreign Key linked to `Team`.`team_fifa_api_id`);",
    "team_attributes.date": "The date for which the team attributes are recorded;",
    "team_attributes.buildupplayspeed": "Speed at which a team moves the ball forward;",
    "team_attributes.buildupplayspeedclass": "The class categorization of the team's build-up play speed.",
    "team_attributes.buildupplaydribbling": "The effectiveness of dribbling in the team's build-up play.",
    "team_attributes.buildupplaydribblingclass": "The class of buildup play dribbling (e.g., Little, Normal);",
    "team_attributes.buildupplaypassing": "The effectiveness of passing in the team's build-up play.",
    "team_attributes.buildupplaypassingclass": "Classification of the build-up play passing skill level;",
    "team_attributes.buildupplaypositioningclass": "The positioning strategy of the team during build-up play.",
    "team_attributes.chancecreationpassing": "The effectiveness of passing in the team's chance creation.",
    "team_attributes.chancecreationpassingclass": "Classification of the chance creation passing skill level;",
    "team_attributes.chancecreationcrossing": "Crossing skill level in creating scoring chances;",
    "team_attributes.chancecreationcrossingclass": "Classification of the chance creation crossing skill level;",
    "team_attributes.chancecreationshooting": "Shooting skill level in creating scoring chances;",
    "team_attributes.chancecreationshootingclass": "Classification of the chance creation shooting skill level;",
    "team_attributes.chancecreationpositioningclass": "Classification of the chance creation positioning style;",
    "team_attributes.defencepressure": "The level of pressure applied by the team in defence;",
    "team_attributes.defencepressureclass": "The class categorization of the team's defensive pressure.",
    "team_attributes.defenceaggression": "The level of aggression shown by the team in defence;",
    "team_attributes.defenceaggressionclass": "The class of defence aggression (e.g., Contain, Press);",
    "team_attributes.defenceteamwidth": "The numerical value representing the team width in defense.",
    "team_attributes.defenceteamwidthclass": "The class/category of the team's defensive width.",
    "team_attributes.defencedefenderlineclass": "The style of the defensive line, e.g., Cover, Offside Trap;",
    "player_attributes.id": "The unique identifier for each entry of player attributes;",
    "player_attributes.player_api_id": "The unique API identifier for the player (Foreign Key linked to `Player`.`player_api_id`);",
    "player_attributes.player_fifa_api_id": "The unique FIFA API identifier for the player (Foreign Key linked to `Player`.`player_fifa_api_id`);",
    "player_attributes.date": "The date for which the player attributes are recorded;",
    "player_attributes.overall_rating": "The overall rating of the player, on a numeric scale.",
    "player_attributes.potential": "The potential rating of the player's future performance.",
    "player_attributes.preferred_foot": "The foot preference of the player (e.g., Left, Right);",
    "player_attributes.attacking_work_rate": "The level of effort a player puts in attacking situations;",
    "player_attributes.defensive_work_rate": "The level of effort a player puts in defensive situations;",
    "player_attributes.crossing": "The player's ability to cross the ball, on a numeric scale.",
    "player_attributes.finishing": "The player's skill in finishing scoring opportunities.",
    "player_attributes.heading_accuracy": "The player's accuracy during headers, on a numeric scale.",
    "player_attributes.short_passing": "The player's ability in short passing, on a numeric scale.",
    "player_attributes.volleys": "The accuracy and effectiveness of a player's volleys;",
    "player_attributes.dribbling": "The player's ability to dribble, on a numeric scale.",
    "player_attributes.curve": "The player's ability to curve the ball, on a numeric scale.",
    "player_attributes.free_kick_accuracy": "The accuracy and effectiveness of a player's free kicks;",
    "player_attributes.long_passing": "The player's ability in long passing, on a numeric scale.",
    "player_attributes.ball_control": "The ability of the player to control the ball;",
    "player_attributes.acceleration": "The speed at which a player can accelerate;",
    "player_attributes.sprint_speed": "The player's sprint speed, measured in a numeric rating.",
    "player_attributes.agility": "The ability of a player to change direction quickly;",
    "player_attributes.reactions": "The player's reaction time, measured in a numeric rating.",
    "player_attributes.balance": "The player's balance, measured in a numeric rating.",
    "player_attributes.shot_power": "The power of the player's shots.",
    "player_attributes.jumping": "The player's ability to jump, measured in a numeric rating.",
    "player_attributes.stamina": "The player's stamina, measured in a numeric rating.",
    "player_attributes.strength": "The physical strength of the player;",
    "player_attributes.long_shots": "The accuracy and effectiveness of a player's long shots;",
    "player_attributes.aggression": "The player's aggression, measured in a numeric rating.",
    "player_attributes.interceptions": "The ability of the player to make interceptions;",
    "player_attributes.positioning": "The player's ability to position themselves effectively;",
    "player_attributes.vision": "The player's vision, measured in a numeric rating.",
    "player_attributes.penalties": "The accuracy and effectiveness of a player's penalty kicks;",
    "player_attributes.marking": "The player's marking ability, measured in a numeric rating.",
    "player_attributes.standing_tackle": "The standing tackle ability of the player;",
    "player_attributes.sliding_tackle": "The ability of the player to slide tackle;",
    "player_attributes.gk_diving": "The diving ability of the goalkeeper;",
    "player_attributes.gk_handling": "The goalkeeper's skill in handling the ball.",
    "player_attributes.gk_kicking": "The goalkeeper's skill in kicking the ball.",
    "player_attributes.gk_positioning": "The goalkeeper's positioning, measured in a numeric rating.",
    "player_attributes.gk_reflexes": "The goalkeeper's reflexes, measured in a numeric rating.",
    "match.id": "Unique identifier for each match (Primary Key);",
    "match.country_id": "The unique identifier for the country where the match took place.",
    "match.league_id": "The unique identifier for the league in which the match was played.",
    "match.season": "The season during which the match took place.",
    "match.stage": "The stage of the league during which the match was played.",
    "match.date": "The date and time when the match took place.",
    "match.match_api_id": "The unique identifier for the match within an API system.",
    "match.home_team_api_id": "The unique identifier for the home team, linked to `Team`.`team_api_id`.",
    "match.away_team_api_id": "The unique identifier for the away team, linked to `Team`.`team_api_id`.",
    "match.home_team_goal": "The number of goals scored by the home team.",
    "match.away_team_goal": "The number of goals scored by the away team.",
    "match.home_player_x1": "The X coordinate of the first player in the home team lineup.",
    "match.home_player_x2": "The X coordinate of the second player in the home team lineup.",
    "match.home_player_x3": "The X coordinate of the third player in the home team lineup.",
    "match.home_player_x4": "The X coordinate of the fourth player in the home team lineup.",
    "match.home_player_x5": "The X coordinate of the fifth player in the home team lineup.",
    "match.home_player_x6": "The X coordinate of the sixth player in the home team lineup.",
    "match.home_player_x7": "The X coordinate of the seventh player in the home team lineup.",
    "match.home_player_x8": "The X coordinate of the eighth player in the home team lineup.",
    "match.home_player_x9": "The X coordinate of the ninth player in the home team lineup.",
    "match.home_player_x10": "The X coordinate of the tenth player in the home team lineup.",
    "match.home_player_x11": "The X coordinate of the eleventh player in the home team lineup.",
    "match.away_player_x1": "The X coordinate of the first player in the away team lineup.",
    "match.away_player_x2": "The X coordinate of the second player in the away team lineup.",
    "match.away_player_x3": "The X coordinate of the third player in the away team lineup.",
    "match.away_player_x4": "The X coordinate of the fourth player in the away team lineup.",
    "match.away_player_x5": "The X coordinate of the fifth player in the away team lineup.",
    "match.away_player_x6": "The X coordinate of the sixth player in the away team lineup.",
    "match.away_player_x7": "The X coordinate of the seventh player in the away team lineup.",
    "match.away_player_x8": "The X coordinate of the eighth player in the away team lineup.",
    "match.away_player_x9": "The X coordinate of the ninth player in the away team lineup.",
    "match.away_player_x10": "The X coordinate of the tenth player in the away team lineup.",
    "match.away_player_x11": "The X coordinate of the eleventh player in the away team lineup.",
    "match.home_player_y1": "The Y coordinate of the first player in the home team lineup.",
    "match.home_player_y2": "The Y coordinate of the second player in the home team lineup.",
    "match.home_player_y3": "The Y coordinate of the third player in the home team lineup.",
    "match.home_player_y4": "The Y coordinate of the fourth player in the home team lineup.",
    "match.home_player_y5": "The Y coordinate of the fifth player in the home team lineup.",
    "match.home_player_y6": "The Y coordinate of the sixth player in the home team lineup.",
    "match.home_player_y7": "The Y coordinate of the seventh player in the home team lineup.",
    "match.home_player_y8": "The Y coordinate of the eighth player in the home team lineup.",
    "match.home_player_y9": "The Y coordinate of the ninth player in the home team lineup.",
    "match.home_player_y10": "The Y coordinate of the tenth player in the home team lineup.",
    "match.home_player_y11": "The Y coordinate of the eleventh player in the home team lineup.",
    "match.away_player_y1": "The Y coordinate of the first player in the away team lineup.",
    "match.away_player_y2": "The Y coordinate of the second player in the away team lineup.",
    "match.away_player_y3": "The Y coordinate of the third player in the away team lineup.",
    "match.away_player_y4": "The Y coordinate of the fourth player in the away team lineup.",
    "match.away_player_y5": "The Y coordinate of the fifth player in the away team lineup.",
    "match.away_player_y6": "The Y coordinate of the sixth player in the away team lineup.",
    "match.away_player_y7": "The Y coordinate of the seventh player in the away team lineup.",
    "match.away_player_y8": "The Y coordinate of the eighth player in the away team lineup.",
    "match.away_player_y9": "The Y coordinate of the ninth player in the away team lineup.",
    "match.away_player_y10": "The Y coordinate of the tenth player in the away team lineup.",
    "match.away_player_y11": "The Y coordinate of the eleventh player in the away team lineup.",
    "match.home_player_1": "The unique identifier for the first player in the home team lineup, linked to `Player`.`player_api_id`.",
    "match.home_player_2": "The unique identifier for the second player in the home team lineup, linked to `Player`.`player_api_id`.",
    "match.home_player_3": "The unique identifier for the third player in the home team lineup, linked to `Player`.`player_api_id`.",
    "match.home_player_4": "The unique identifier for the fourth player in the home team lineup, linked to `Player`.`player_api_id`.",
    "match.home_player_5": "The unique identifier for the fifth player in the home team lineup, linked to `Player`.`player_api_id`.",
    "match.home_player_6": "The unique identifier for the sixth player in the home team lineup, linked to `Player`.`player_api_id`.",
    "match.home_player_7": "The unique identifier for the seventh player in the home team lineup, linked to `Player`.`player_api_id`.",
    "match.home_player_8": "The unique identifier for the eighth player in the home team lineup, linked to `Player`.`player_api_id`.",
    "match.home_player_9": "The unique identifier for the ninth player in the home team lineup, linked to `Player`.`player_api_id`.",
    "match.home_player_10": "The unique identifier for the tenth player in the home team lineup, linked to `Player`.`player_api_id`.",
    "match.home_player_11": "The unique identifier for the eleventh player in the home team lineup, linked to `Player`.`player_api_id`.",
    "match.away_player_1": "The unique identifier for the first player in the away team lineup, linked to `Player`.`player_api_id`.",
    "match.away_player_2": "The unique identifier for the second player in the away team lineup, linked to `Player`.`player_api_id`.",
    "match.away_player_3": "The unique identifier for the third player in the away team lineup, linked to `Player`.`player_api_id`.",
    "match.away_player_4": "The unique identifier for the fourth player in the away team lineup, linked to `Player`.`player_api_id`.",
    "match.away_player_5": "The unique identifier for the fifth player in the away team lineup, linked to `Player`.`player_api_id`.",
    "match.away_player_6": "The unique identifier for the sixth player in the away team lineup, linked to `Player`.`player_api_id`.",
    "match.away_player_7": "The unique identifier for the seventh player in the away team lineup, linked to `Player`.`player_api_id`.",
    "match.away_player_8": "The unique identifier for the eighth player in the away team lineup, linked to `Player`.`player_api_id`.",
    "match.away_player_9": "The unique identifier for the ninth player in the away team lineup, linked to `Player`.`player_api_id`.",
    "match.away_player_10": "The unique identifier for the tenth player in the away team lineup, linked to `Player`.`player_api_id`.",
    "match.away_player_11": "The unique identifier for the eleventh player in the away team lineup, linked to `Player`.`player_api_id`.",
    "match.goal": "Detailed information about the goals scored in the match.",
    "match.shoton": "XML/JSON detailing the shots on target during the match;",
    "match.shotoff": "XML/JSON detailing the shots off target during the match;",
    "match.foulcommit": "XML/JSON detailing the fouls committed during the match;",
    "match.card": "The details of cards issued (yellow/red) during the match.",
    "match.cross": "XML/JSON detailing the crosses made during the match;",
    "match.corner": "XML/JSON detailing the corners awarded during the match;",
    "match.possession": "Information about possession percentages during the match.",
    "match.b365h": "Betting odds for the home team to win, provided by Bet365.",
    "match.b365d": "Betting odds for the match to be a draw from Bet365.",
    "match.b365a": "Betting odds for the away team to win, provided by Bet365.",
    "match.bwh": "Betting odds for the home team winning from Bet&Win.",
    "match.bwd": "Betting odds for the match to be a draw from Bet&Win.",
    "match.bwa": "Betting odds for the away team winning from Bet&Win.",
    "match.iwh": "Betting odds for the home team winning from Interwetten.",
    "match.iwd": "Betting odds for the match to be a draw from Interwetten.",
    "match.iwa": "Betting odds for the away team winning from Interwetten.",
    "match.lbh": "Betting odds for the home team winning from Ladbrokes.",
    "match.lbd": "Betting odds for the match to be a draw from Ladbrokes.",
    "match.lba": "Betting odds for the away team winning from Ladbrokes.",
    "match.psh": "Betting odds for the home team winning from Pinnacle Sports.",
    "match.psd": "Betting odds for a draw from bookmaker Pinnacle Sports.",
    "match.psa": "Betting odds for the away team winning from Pinnacle Sports.",
    "match.whh": "Betting odds for the home team winning from William Hill.",
    "match.whd": "Betting odds for the match to be a draw from William Hill.",
    "match.wha": "Betting odds for the away team winning from William Hill.",
    "match.sjh": "Betting odds for the home team to win, provided by SboBET.",
    "match.sjd": "Betting odds for the match to be a draw from Stan James.",
    "match.sja": "Betting odds for the away team to win, provided by SboBET.",
    "match.vch": "Betting odds for the home team winning from BetVictor.",
    "match.vcd": "Betting odds for the match to be a draw from VC Bet.",
    "match.vca": "Betting odds for the away team winning from BetVictor.",
    "match.gbh": "Betting odds for the home team winning from Gamebookers.",
    "match.gbd": "Betting odds for the match to be a draw from Gamebookers.",
    "match.gba": "Betting odds for the away team winning from Gamebookers.",
    "match.bsh": "Betting odds for the home team to win, provided by 10Bet.",
    "match.bsd": "Betting odds for the match to be a draw from Bet-at-home.",
    "match.bsa": "Betting odds for the away team to win, provided by 10Bet."
  },
  "thrombosis_prediction": {
    "patient.id": "The unique identifier for a patient; This is a Primary Key.",
    "patient.sex": "The gender of the patient (e.g., 'M' for male, 'F' for female);",
    "patient.birthday": "Birth date of the patient in the format YYYY-MM-DD;",
    "patient.description": "Additional description or details about the patient;",
    "patient.first date": "The date when the patient was first admitted or registered.",
    "patient.admission": "Admission status or notes about the patient's admission;",
    "patient.diagnosis": "Diagnosis or medical condition identified for the patient;",
    "examination.id": "The identifier linking the examination to a patient (Foreign Key, linked to `Patient.ID`);",
    "examination.examination date": "The date when the medical examination was conducted;",
    "examination.acl igg": "The concentration of anti-cardiolipin antibody (IgG) in the patient's blood;",
    "examination.acl igm": "The concentration of anti-cardiolipin antibody (IgM) in the patient's blood;",
    "examination.ana": "The concentration of anti-nucleus antibody in the patient's blood;",
    "examination.ana pattern": "The pattern observed in the sheet of the ANA examination.",
    "examination.acl iga": "The concentration of anti-cardiolipin antibody (IgA) in the patient's blood;",
    "examination.diagnosis": "The medical diagnosis assigned at the time of examination;",
    "examination.kct": "Measurement indicating coagulation levels (Kaolin Clotting Time);",
    "examination.rvvt": "Measurement indicating coagulation levels (Russell viper venom test);",
    "examination.lac": "Measurement indicating the presence of lupus anticoagulants;",
    "examination.symptoms": "Symptoms observed in the patient during examination.",
    "examination.thrombosis": "Indicator of thrombosis, typically range from 0 to 3;",
    "laboratory.id": "The identifier linking the laboratory report to a patient (Foreign Key, linked to `Patient.ID`);",
    "laboratory.date": "The date the laboratory tests were conducted (Primary Key);",
    "laboratory.got": "Measurement of glutamic oxaloacetic transaminase (GOT/AST);",
    "laboratory.gpt": "The concentration of glutamic pyruvic transaminase (ALT).",
    "laboratory.ldh": "The concentration of lactate dehydrogenase.",
    "laboratory.alp": "The concentration of alkaline phosphatase.",
    "laboratory.tp": "The total amount of protein in the blood;",
    "laboratory.alb": "The level of albumin in the blood;",
    "laboratory.ua": "The level of uric acid in the blood;",
    "laboratory.un": "The level of urea nitrogen in the blood;",
    "laboratory.cre": "The level of creatinine in the blood;",
    "laboratory.t-bil": "The level of total bilirubin in the blood;",
    "laboratory.t-cho": "The level of total cholesterol in the blood;",
    "laboratory.tg": "The level of triglyceride in the blood;",
    "laboratory.cpk": "The concentration of creatinine phosphokinase.",
    "laboratory.glu": "The concentration of glucose in the blood.",
    "laboratory.wbc": "The concentration of white blood cells.",
    "laboratory.rbc": "The concentration of red blood cells.",
    "laboratory.hgb": "The concentration of hemoglobin.",
    "laboratory.hct": "Concentration of Hematocrit.",
    "laboratory.plt": "The concentration of platelets.",
    "laboratory.pt": "The prothrombin time (measurement of blood clotting time).",
    "laboratory.aptt": "Activated Partial Thromboplastin Time measurement;",
    "laboratory.fg": "The concentration of fibrinogen.",
    "laboratory.pic": "Plasminogen activator inhibitor complex (PIC) level.",
    "laboratory.tat": "The concentration of thrombin-antithrombin complex.",
    "laboratory.tat2": "Another measurement of the thrombin-antithrombin complex;",
    "laboratory.u-pro": "The presence of protein in the urine (Proteinuria);",
    "laboratory.igg": "Concentration of Immunoglobulin G (IgG).",
    "laboratory.iga": "Concentration of Immunoglobulin A (IgA).",
    "laboratory.igm": "Concentration of Immunoglobulin M (IgM).",
    "laboratory.crp": "C-Reactive Protein level indicating inflammation;",
    "laboratory.ra": "Presence of Rheumatoid Arthritis factor.",
    "laboratory.rf": "Rheumatoid arthritis health assessment (RAHA) level;",
    "laboratory.c3": "The concentration of complement component 3.",
    "laboratory.c4": "The concentration of complement component 4.",
    "laboratory.rnp": "The presence and concentration of anti-ribonuclear protein.",
    "laboratory.sm": "The presence and concentration of anti-Smith antibodies.",
    "laboratory.sc170": "The presence and concentration of anti-Scl-70 antibodies.",
    "laboratory.ssa": "The presence and concentration of anti-SSA antibodies.",
    "laboratory.ssb": "The presence and concentration of anti-SSB antibodies.",
    "laboratory.centromea": "The presence of anti-centromere antibodies;",
    "laboratory.dna": "The presence and concentration of anti-DNA antibodies.",
    "laboratory.dna-ii": "The presence of another form or measurement of anti-DNA antibodies;"
  },
  "toxicology": {
    "molecule.molecule_id": "The unique identifier for each molecule, serving as the primary key.",
    "molecule.label": "The label indicating a characteristic of the molecule, most commonly used values are '+' and '-'.",
    "atom.atom_id": "The unique identifier for each atom, serving as the primary key.",
    "atom.molecule_id": "The identifier linking the atom to its corresponding molecule, serving as a foreign key referencing `molecule`.`molecule_id`.",
    "atom.element": "The chemical element of the atom, represented by its symbol.",
    "bond.bond_id": "The unique identifier for each bond, serving as the primary key.",
    "bond.molecule_id": "The identifier linking the bond to its corresponding molecule, serving as a foreign key referencing `molecule`.`molecule_id`.",
    "bond.bond_type": "The type of the bond, represented by specific symbols or letters.",
    "connected.atom_id": "The identifier linking to the first atom in the bond, serving as a foreign key referencing `atom`.`atom_id`.",
    "connected.atom_id2": "The identifier linking to the second atom in the bond, serving as a foreign key referencing `atom`.`atom_id`.",
    "connected.bond_id": "The identifier linking to the bond between the two atoms, serving as a foreign key referencing `bond`.`bond_id`."
  },
  "student_club": {
    "attendance.link_to_event": "The event that the attendance record is associated with.",
    "attendance.link_to_member": "Reference to the member, joining with `member`.`member_id`.",
    "major.major_id": "major id, primary key that uniquely identifies each major.",
    "major.major_name": "The name of the academic major.",
    "major.department": "The department within which the major is offered.",
    "major.college": "The college within the institution that offers the major;",
    "zip_code.zip_code": "Unique identifier for each postal code area (Primary Key);",
    "zip_code.type": "The type of postal code (e.g., Standard, PO Box, Unique).",
    "zip_code.city": "The city associated with the postal code.",
    "zip_code.county": "The county associated with the postal code.",
    "zip_code.state": "The state associated with the postal code.",
    "zip_code.short_state": "The abbreviated form of the state associated with the postal code.",
    "income.income_id": "The unique identifier for an income entry (Primary Key).",
    "income.date_received": "The date on which the income was received;",
    "income.amount": "The amount of money received as income.",
    "income.source": "The source of the income (e.g., 'Dues', 'Sponsorship');",
    "income.notes": "Additional notes or description related to the income.",
    "income.link_to_member": "Reference to the member, joining with `member`.`member_id`.",
    "budget.budget_id": "Unique identifier for each budget record (Primary Key);",
    "budget.category": "The category of the budget (e.g., 'Food', 'Advertisement');",
    "budget.spent": "The amount of money that has been spent from the budget.",
    "budget.remaining": "The amount remaining in the budget after expenditures;",
    "budget.amount": "The total amount allocated for the budget.",
    "budget.event_status": "The status of the event associated with the budget (e.g., Open, Closed).",
    "budget.link_to_event": "Reference to the event, joining with `event`.`event_id`.",
    "event.event_id": "event id, primary key that uniquely identifies each event.",
    "event.event_name": "The name of the event.",
    "event.event_date": "the date on which the event is scheduled to take place.",
    "event.type": "The type or category of the event (e.g., Meeting, Social).",
    "event.notes": "Additional notes or description related to the event.",
    "event.location": "The location where the event will take place.",
    "event.status": "The current status of the event (e.g., Closed, Planning).",
    "expense.expense_id": "The unique identifier for an expense entry (Primary Key).",
    "expense.expense_description": "Description of the expense item;",
    "expense.expense_date": "The date on which the expense was incurred;",
    "expense.cost": "The cost of the expense.",
    "expense.approved": "Whether the expense is approved (e.g., true, None).",
    "expense.link_to_member": "Reference to the member, joining with `member`.`member_id`.",
    "expense.link_to_budget": "Reference to the budget, joining with `budget`.`budget_id`.",
    "member.member_id": "The unique identifier for a member (Primary Key).",
    "member.first_name": "The first name of the member.",
    "member.last_name": "The last name of the member.",
    "member.email": "The email address of the member.",
    "member.position": "The position or role of the member in the club (e.g., Member, Vice President).",
    "member.t_shirt_size": "The T-shirt size of the member.",
    "member.phone": "The phone number of the member.",
    "member.zip": "The ZIP code of the member's address (`zip_code.zip_code`).",
    "member.link_to_major": "Reference to the major, joining with `major`.`major_id`."
  },
  "superhero": {
    "hero_power.hero_id": "The unique identifier (Primary Key) for each hero in the `superhero` table. It establishes a relationship between a superhero and their superpowers.",
    "hero_power.power_id": "The unique identifier (Primary Key) for each power in the `superpower` table. It links the particular superpower to the hero.",
    "gender.id": "A unique identifier for each gender, used as a primary key.",
    "gender.gender": "The gender type, such as Female, Male, or N/A.",
    "race.id": "A unique identifier for each race, used as a primary key.",
    "race.race": "The race type, such as Alien, Zombie, or Zen-Whoberian.",
    "alignment.id": "The unique identifier for an alignment category.",
    "alignment.alignment": "The alignment of the superhero, such as Good, Bad, Neutral, or N/A.",
    "colour.id": "A unique identifier for each color, used as a primary key.",
    "colour.colour": "The colour type, such as Amber, Auburn, Yellow/Red, or Yellow/Blue.",
    "attribute.id": "The unique identifier for the attribute name;",
    "attribute.attribute_name": "The name of the attribute, such as Combat, Durability, Strength, or Speed.",
    "publisher.id": "The unique identifier for each publisher.",
    "publisher.publisher_name": "The name of the publisher, such as ABC Studios, Wildstorm, or Universal Studios.",
    "superpower.id": "The unique identifier for each superpower.",
    "superpower.power_name": "The name of the superpower, such as Accelerated Healing, Adaptation, Wind Control, or Web Creation.",
    "hero_attribute.hero_id": "Unique identifier for each hero in the `superhero` table. It links a hero to their attributes.",
    "hero_attribute.attribute_id": "Unique identifier for each attribute in the `attribute` table. It links the specific attribute to the hero.",
    "hero_attribute.attribute_value": "The value assigned to a particular attribute of a hero, such as 35.",
    "superhero.id": "The unique identifier for each superhero.",
    "superhero.superhero_name": "The name of the superhero (e.g., 3-D Man, Zatanna).",
    "superhero.full_name": "The full name of the superhero or their alter-ego;",
    "superhero.gender_id": "Unique identifier for gender in the `gender` table, denoting the hero's gender.",
    "superhero.eye_colour_id": "Unique identifier for eye colour in the `colour` table, denoting the hero's eye colour.",
    "superhero.hair_colour_id": "Unique identifier for hair colour in the `colour` table, denoting the hero's hair colour.",
    "superhero.skin_colour_id": "Unique identifier for skin colour in the `colour` table, denoting the hero's skin colour.",
    "superhero.race_id": "Unique identifier for race in the `race` table, denoting the hero's race.",
    "superhero.publisher_id": "Unique identifier for publisher in the `publisher` table, denoting the publisher of the hero.",
    "superhero.alignment_id": "Unique identifier for alignment in the `alignment` table, denoting the alignment of the hero.",
    "superhero.height_cm": "The height of the superhero in centimeters.",
    "superhero.weight_kg": "The weight of the superhero in kilograms."
  },
  "codebase_community": {
    "badges.id": "The unique identifier for each badge (Primary Key).",
    "badges.userid": "The identifier of the user to whom the badge is awarded, linking to `users`.`Id`.",
    "badges.name": "The name of the badge awarded.",
    "badges.date": "The date and time when the badge was awarded.",
    "tags.id": "The unique identifier for each tag (Primary Key).",
    "tags.tagname": "The name of the tag.",
    "tags.count": "The number of posts associated with this tag;",
    "tags.excerptpostid": "The identifier of the post containing the tag's excerpt, linking to `posts`.`Id`.",
    "tags.wikipostid": "The identifier of the post serving as the tag's wiki, linking to `posts`.`Id`.",
    "postlinks.id": "The unique identifier for each post link (Primary Key).",
    "postlinks.creationdate": "The date and time when the post link was created.",
    "postlinks.postid": "The identifier of the post that contains the link, linking to `posts`.`Id`.",
    "postlinks.relatedpostid": "The identifier of the related post, also linking to `posts`.`Id`.",
    "postlinks.linktypeid": "The type identifier of the link (e.g., duplicate, related, etc.).",
    "votes.id": "The unique identifier for each vote (Primary Key).",
    "votes.postid": "The identifier of the post that received the vote, linking to `posts`.`Id`.",
    "votes.votetypeid": "The type identifier of the vote (e.g., upvote, downvote, etc.).",
    "votes.creationdate": "The date and time when the vote was created.",
    "votes.userid": "The identifier of the user who cast the vote, linking to `users`.`Id`.",
    "votes.bountyamount": "The bounty amount associated with the vote, if applicable.",
    "comments.id": "The unique identifier for each comment (Primary Key).",
    "comments.postid": "The identifier of the post to which the comment belongs, linking to `posts`.`Id`.",
    "comments.score": "The score of the comment (e.g., upvotes minus downvotes).",
    "comments.text": "The textual content of the comment.",
    "comments.creationdate": "The date and time when the comment was created.",
    "comments.userid": "The identifier of the user who wrote the comment, linking to `users`.`Id`.",
    "comments.userdisplayname": "The display name of the user who posted the comment.",
    "posthistory.id": "The unique identifier for each post history entry.",
    "posthistory.posthistorytypeid": "The type of history event (e.g., edit, deletion, etc.).",
    "posthistory.postid": "The identifier of the post whose history is being recorded, linking to `posts`.`Id`.",
    "posthistory.revisionguid": "The globally unique identifier for the revision.",
    "posthistory.creationdate": "The date and time when the history entry was created.",
    "posthistory.userid": "The identifier of the user who made the revision, linking to `users`.`Id`.",
    "posthistory.text": "The textual content associated with the history event.",
    "posthistory.comment": "Any additional comment associated with the history event.",
    "posthistory.userdisplayname": "The display name of the user who made the history event.",
    "users.id": "The unique identifier for each user (Primary Key).",
    "users.reputation": "The reputation score of the user.",
    "users.creationdate": "The date and time when the user account was created.",
    "users.displayname": "The display name of the user.",
    "users.lastaccessdate": "The date and time when the user last accessed their account.",
    "users.websiteurl": "The user's personal or professional website URL;",
    "users.location": "The geographical location of the user;",
    "users.aboutme": "The biography or about me information of the user.",
    "users.views": "The number of times the user's profile has been viewed.",
    "users.upvotes": "The number of upvotes the user has cast.",
    "users.downvotes": "The number of downvotes the user has cast.",
    "users.accountid": "The unique account identifier, possibly linked to a network of sites.",
    "users.age": "The age of the user.",
    "users.profileimageurl": "The URL of the user's profile image.",
    "posts.id": "The unique identifier for each post (Primary Key).",
    "posts.posttypeid": "The type identifier for the post (e.g., question, answer).",
    "posts.acceptedanswerid": "The identifier of the accepted answer for a question post, linking to `posts`.`Id`.",
    "posts.creaiondate": "The date and time when the post was created.",
    "posts.score": "The score of the post (e.g., upvotes minus downvotes).",
    "posts.viewcount": "The number of times the post has been viewed.",
    "posts.body": "The textual content of the post.",
    "posts.owneruserid": "The identifier of the user who owns the post, linking to `users`.`Id`.",
    "posts.lasactivitydate": "The date and time of the last activity on the post.",
    "posts.title": "The title of the post.",
    "posts.tags": "The tags associated with the post.",
    "posts.answercount": "The number of answers the post has received (for questions).",
    "posts.commentcount": "The number of comments the post has received.",
    "posts.favoritecount": "The number of times the post has been marked as a favorite.",
    "posts.lasteditoruserid": "The identifier of the user who last edited the post, linking to `users`.`Id`.",
    "posts.lasteditdate": "The date and time when the post was last edited.",
    "posts.communityowneddate": "The date and time when the post was made community-owned;",
    "posts.parentid": "The identifier of the parent post in case of a nested post, linking to `posts`.`Id`.",
    "posts.closeddate": "The date and time when the post was closed (if applicable);",
    "posts.ownerdisplayname": "The display name of the user who created the post.",
    "posts.lasteditordisplayname": "The display name of the user who last edited the post."
  }
}